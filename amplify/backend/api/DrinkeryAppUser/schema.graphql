type Basket @model @auth(rules: [{allow: public}]) {
  id: ID!
  BasketProducts: [BasketProduct] @hasMany(indexName: "byBasket", fields: ["id"])
  userID: ID! @index(name: "byUser")
  storeID: ID! @index(name: "byStore")
}

enum OrderStatus {
  NEW
  IN_PREPARATION
  READY_FOR_PICKUP
  PICKED_UP
  COMPLETED
}

type OrderProduct @model @auth(rules: [{allow: public}]) {
  id: ID!
  quantity: Int!
  Product: Product @hasOne
  orderID: ID! @index(name: "byOrder")
}

type Order @model @auth(rules: [{allow: public}]) {
  id: ID!
  userID: ID! @index(name: "byUser")
  Store: Store @hasOne
  float: Float!
  status: OrderStatus!
  OrderProducts: [OrderProduct] @hasMany(indexName: "byOrder", fields: ["id"])
}

type BasketProduct @model @auth(rules: [{allow: public}]) {
  id: ID!
  quantity: Int!
  Product: Product @hasOne
  basketID: ID! @index(name: "byBasket")
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  address: String!
  lat: Float!
  lng: Float!
  Orders: [Order] @hasMany(indexName: "byUser", fields: ["id"])
  Baskets: [Basket] @hasMany(indexName: "byUser", fields: ["id"])
  sub: String!
}

type Product @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  image: String
  description: String
  unitType: String
  unitVol: Int
  price: Float!
  storeID: ID! @index(name: "byStore")
}

type Store @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  image: String!
  deliveryFee: Float!
  minDeliveryTime: Int!
  maxDeliveryTime: Int!
  rating: Float
  address: String!
  lat: Float!
  lng: Float!
  Products: [Product] @hasMany(indexName: "byStore", fields: ["id"])
  Baskets: [Basket] @hasMany(indexName: "byStore", fields: ["id"])
}
 